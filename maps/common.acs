#library "common"
#include "zcommon.acs"

int zone;
int act;

int endofact;
int endofstage;

int mins, secs;

int killbonus;
int killcount;
int secretbonus;
int secretcount;
int killtarget;

int rings;
int ringcount;
int ringbonus;

int bonus_lev_num;

bool ready;
bool show_hud;
bool time_running;

str zone_titles[15]={
	"Sunset Island Zone"  , // zone  1
	"Sunset Forest Zone"  , // zone  2
	"Skull Temple Zone"   , // zone  3
	"Nightmare Zone"      , // zone  4
	"Forest Fortress Zone", // zone  5
	"Active Volcano Zone" , // zone  6
	"Ocean City Zone"     , // zone  7
	"Crystal Palace Zone" , // zone  8
	"Nautical Mines Zone" , // zone  9
	"Steel Works Zone"    , // zone 10
	"Industrial Zone"     , // zone 11
	"Sky City Zone"       , // zone 12
	"Space Chase Zone"    , // zone 13
	"Doom Star Zone"      , // zone 14
	"Final Battle Zone"   , // zone 15
	};

int deepWaterN = 128;
bool inDeepWater[128];
bool onWaterSurface[128];
bool isTopDownWater[128];

int forceFieldN = 32;
int  forceField_lid    [32];
int  forceField_anim_n [32];
int  forceField_anim_dl[32];
int  forceField_trans  [32];
str  forceField_texStr [32];
int  forceField_cd     [32];
bool forceField_hurt   [32];
bool forceField_active [32];

int tiszaszaki_dw_chk_water_id;

bool tiszaszaki_dw_splash_log;

bool tiszaszaki_dw_act_below_surface;
bool tiszaszaki_dw_act_above_surface;

int script210_wtag, script210_wtid;

bool script212_log;

int script904_ang_n;

// spawn IDs (by tiszaszaki)

#libdefine T_BOOM 161
#libdefine T_ICEJET 223
#libdefine T_FIREJET 224
#libdefine T_MINE 20077
#libdefine T_HEXENARROW 209

#libdefine T_REIVERFIREBALL 207
#libdefine T_REIVERFIREBALL2 212
#libdefine T_IMPFIREBALL2 201
#libdefine T_CACOFIREBALL 126
#libdefine T_CACOFIREBALL2 202
#libdefine T_ARACHNOTRONPLASMA2 205
#libdefine T_MANCUBUSFIREBALL 204
#libdefine T_BARONFIREBALL 203
#libdefine T_BLOODSCOURGESHOT 208

#libdefine T_BANBALL 215
#libdefine T_BANIPBALL 216

#libdefine T_ENHANCEDDEMON 30017
#libdefine T_ENHANCEDCACODEMON 30020
#libdefine T_ENHANCEDIMP 30015
#libdefine T_MINICYBERDEMON 23

#libdefine T_FIREBOMB 217
#libdefine T_MACE2 211
#libdefine T_ROCKET2 116
#libdefine T_TRACER2 9

#libdefine T_PLASMABOLT2 206

#libdefine T_SPHERE 189
#libdefine T_RING 167

// bonus stage related defines (by tiszaszaki)

int bonus_stage_state;

#libdefine BONUS_STAGE_PLAYING 0
#libdefine BONUS_STAGE_WIN 1
#libdefine BONUS_STAGE_LOSE 2
#libdefine NOT_A_BONUS_STAGE -1

// deep water effect scripts (by tiszaszaki)

// common

function int tiszaszaki_deepwater_check(int activator, int wtag, int wtid, bool top_down, bool log_check)
{
	int x=GetActorX(wtid);
	int y=GetActorY(wtid);

	int sfloor=GetSectorFloorZ(wtag, x,y);
	int playerEyeHeight=(GetActorZ(activator) - sfloor) + GetActorViewHeight(activator);
	int waterSurfaceHeight=GetSectorCeilingZ(wtag, x,y) - sfloor;

	int res=0;

	if (log_check)
	{
		str log_str="tiszaszaki_deepwater_check";

		if (tiszaszaki_dw_chk_water_id >= 0)
			log_str = StrParam(s:log_str,s:" (water id:",d:tiszaszaki_dw_chk_water_id,s:")");

		log_str = StrParam(s:log_str,s:": ",d:playerEyeHeight >> 16,s:" ? ",d:waterSurfaceHeight >> 16,s:" (",d:sfloor >> 16,s:")");

		Log(s:log_str);
	}

	if (top_down)
	{
		if (playerEyeHeight < 0) res = 1;
		if (playerEyeHeight > 0) res = -1;
	}
	else
	{
		if (playerEyeHeight < waterSurfaceHeight) res = -1;
		if (playerEyeHeight > waterSurfaceHeight) res = 1;
	}

	return res;
}

// splashing

script "tiszaszaki_deepwater_in" (int i, int log_i) // in
{
	if ((i >= 0) && (i < deepWaterN))
	{
		bool log_splash=(log_i != 0);

		if (!inDeepWater[i])
		{
			if (log_splash) Log(s:"tiszaszaki_deepwater_in: splashing (water id:",d:i,s:")");

			PlaySound(0,"splash");
			inDeepWater[i]=true;
		}
	}
}

script "tiszaszaki_deepwater_out" (int i, int log_i) // out
{
	if ((i >= 0) && (i < deepWaterN))
	{
		bool log_splash=(log_i != 0);

		if (inDeepWater[i])
		{
			if (log_splash) Log(s:"tiszaszaki_deepwater_out: splashing (water id:",d:i,s:")");

			PlaySound(0,"splash");
			inDeepWater[i]=false;
		}
	}
}

script "tiszaszaki_deepwater_do_splash" (int i, int wtag, int wtid)
{
	if ((i >= 0) && (i < deepWaterN) && (wtag > 0) && (wtid > 0))
	{
		while (onWaterSurface[i])
		{
			int checkVal;
			int dl=2;

			tiszaszaki_dw_chk_water_id = i;

			checkVal = tiszaszaki_deepwater_check(0, wtag, wtid, isTopDownWater[i], tiszaszaki_dw_splash_log);

			if (checkVal < 0)
				ACS_NamedExecute("tiszaszaki_deepwater_in", 0, i,tiszaszaki_dw_splash_log,0);
			if (checkVal > 0)
				ACS_NamedExecute("tiszaszaki_deepwater_out", 0, i,tiszaszaki_dw_splash_log,0);

			Delay(dl);
		}
	}
}

function void tiszaszaki_deepwater_istopdown(int i, bool b)
{
	if ((i >= 0) && (i < deepWaterN))
		isTopDownWater[i] = b;
}

script 210 (int i, int wtag, int wtid)
{
	if ((i >= 0) && (i < deepWaterN) && (wtag > 0) && (wtid > 0))
    if (!onWaterSurface[i])
    {
        script210_wtag = wtag;
        script210_wtid = wtid;

        onWaterSurface[i]=true;
        ACS_NamedExecute("tiszaszaki_deepwater_do_splash", 0, i,wtag,wtid);
    }
}

script 211 (int i)
{
	if ((i >= 0) && (i < deepWaterN))
    if (onWaterSurface[i])
    {
        onWaterSurface[i]=false;
    }
}

// thing activation (e.g. ambients)

script 212 (int i, int tid, int active) // in both ways
{
	if ((i >= 0) && (i < deepWaterN) && (tid > 0))
	{
		tiszaszaki_dw_act_below_surface = true;
		tiszaszaki_dw_act_above_surface = true;

		while (!onWaterSurface[i]) Delay(1);
		ACS_NamedExecute("tiszaszaki_deepwater_do_thing_activation", 0, i,tid,active);
	}
}

script 213 (int i, int tid, int active) // downward only
{
	if ((i >= 0) && (i < deepWaterN) && (tid > 0))
	{
		tiszaszaki_dw_act_below_surface = true;
		tiszaszaki_dw_act_above_surface = false;

		while (!onWaterSurface[i]) Delay(1);
		ACS_NamedExecute("tiszaszaki_deepwater_do_thing_activation", 0, i,tid,active);
	}
}

script "tiszaszaki_deepwater_do_thing_activation" (int i, int tid, int active_i)
{
	if ((i >= 0) && (i < deepWaterN) && (tid > 0))
	{
		int wtag=script210_wtag;
		int wtid=script210_wtid;

		bool active=false;
		if (active_i != 0) active=true;

		while (onWaterSurface[i])
		{
			int checkVal;
			bool activated=!GetActorProperty(tid, APROP_Dormant);
			int dl=2;

			tiszaszaki_dw_chk_water_id = i;

			checkVal = tiszaszaki_deepwater_check(0, wtag, wtid, isTopDownWater[i], tiszaszaki_dw_splash_log);

			if (tiszaszaki_dw_act_below_surface && (checkVal < 0))
			{
				if (!activated && active)
				{
					if (script212_log) Log(s:"tiszaszaki_deepwater_do_thing_activation: water_id = ",d:i,s:", thing tid:",d:tid,s:", activating below surface...");
					Thing_Activate(tid);
				}
				if (activated && !active)
				{
					if (script212_log) Log(s:"tiszaszaki_deepwater_do_thing_activation: water_id = ",d:i,s:", thing tid:",d:tid,s:", deactivating below surface...");
					Thing_Deactivate(tid);
				}
			}
			if (tiszaszaki_dw_act_above_surface && (checkVal > 0))
			{
				if (activated && active)
				{
					if (script212_log) Log(s:"tiszaszaki_deepwater_do_thing_activation: water_id = ",d:i,s:", thing tid:",d:tid,s:", deactivating above surface...");
					Thing_Deactivate(tid);
				}
				if (!activated && !active)
				{
					if (script212_log) Log(s:"tiszaszaki_deepwater_do_thing_activation: water_id = ",d:i,s:", thing tid:",d:tid,s:", activating above surface...");
					Thing_Activate(tid);
				}
			}

			Delay(dl);
		}
	}
}

script 904 (int target_tid, int target_pitch) // generic face to actor
{
	if (target_tid >= 0)
	{
		int ang0=GetActorAngle(0), ang1=VectorAngle(GetActorX(target_tid)-GetActorX(0),GetActorY(target_tid)-GetActorY(0));
		int pit0=GetActorPitch(0), pit1=FixedDiv(target_pitch << 16,360 << 16);
		int ang_d=ang1-ang0, pit_d=pit1-pit0;
		int i=0, ang_n=script904_ang_n;
		int dl=1;

		//Log(d:ang0 >> 8,s:",",d:ang1 >> 8);
		//Log(d:pit0 >> 8,s:",",d:pit1 >> 8);

		for (i=0;i<ang_n;i++)
		{
			int i_fixed=FixedDiv((i+1) << 16,ang_n << 16);
			int ang=ang0 + FixedMul(ang_d,i_fixed), pit=pit0 + FixedMul(pit_d,i_fixed);

			//Log(d:i,s:":",d:ang >> 8,s:",",d:pit >> 8);

			SetActorAngle(0, ang);
			SetActorPitch(0, pit);

			Delay(dl);
		}
	}
}

// forcefield management

script 230 (int ff_i, int test_mode_i)
{
	if ((ff_i >= 0) && (ff_i < forceFieldN))
	{
		bool test_mode=(test_mode_i != 0);

		if (test_mode || !forceField_active[ff_i])
		{
			int  lid     =forceField_lid   [ff_i];
			int  trans_am=forceField_trans [ff_i];
			str  texStr  =forceField_texStr[ff_i];
			int  cd      =forceField_cd    [ff_i];
			bool hurt    =forceField_hurt  [ff_i];

			str texClr="-";
			int tr_add=NO;

			int i,n=forceField_anim_n[ff_i];
			int anim_dl=forceField_anim_dl[ff_i];

			forceField_active[ff_i] = true;

			if (!test_mode && hurt) ForceField();

			SetLineTexture(lid, SIDE_FRONT, TEXTURE_MIDDLE, texStr);
			SetLineTexture(lid, SIDE_BACK,  TEXTURE_MIDDLE, texStr);

			for (i=0;i<=n;i++)
			{
				int i_fixed=FixedDiv((n-i) << 16,n << 16);
				int temp_trans=FixedMul(trans_am << 16,i_fixed) >> 16;

				//if (test_mode) Log(d:i,s:" ->",d:temp_trans);

				TranslucentLine(lid, temp_trans, tr_add);
				Delay(anim_dl);
			}

			SetLineTexture(lid, SIDE_FRONT, TEXTURE_MIDDLE, texClr);
			SetLineTexture(lid, SIDE_BACK,  TEXTURE_MIDDLE, texClr);

			if (!test_mode && (cd > 0)) Delay(cd);

			forceField_active[ff_i] = false;
		}
	}
}

function void clear_forcefield_entry(int ff_i)
{
	if ((ff_i >= 0) && (ff_i < forceFieldN))
	{
		forceField_lid    [ff_i] = 0;
		forceField_anim_n [ff_i] = 0;
		forceField_anim_dl[ff_i] = 0;
		forceField_trans  [ff_i] = 0;
		forceField_texStr [ff_i] = "";
		forceField_cd     [ff_i] = 0;
		forceField_hurt   [ff_i] = false;
		forceField_active [ff_i] = false;
	}
}

function void tiszaszaki_setup_forcefield(int ff_i, int lid, int anim_n, int anim_dl, int trans_am, str texStr, int cd, int blktype, bool hurt)
{
	if ((ff_i >= 0) && (ff_i < forceFieldN) && (forceField_lid[ff_i] == 0)
		&& (lid > 0) && (anim_n > 0) && (anim_dl > 0) && (anim_dl <= 8) && (trans_am > 0)
		&& (texStr != "") && (cd >= 0) && (blktype > BLOCK_NOTHING))
	{
		forceField_lid    [ff_i] = lid;
		forceField_anim_n [ff_i] = anim_n;
		forceField_anim_dl[ff_i] = anim_dl;
		forceField_trans  [ff_i] = trans_am;
		forceField_texStr [ff_i] = texStr;
		forceField_cd     [ff_i] = cd;
		forceField_hurt   [ff_i] = hurt;

		SetLineBlocking(lid, blktype);
		SetLineSpecial(lid, 226, 230,0,ff_i,NO,0);
		SetLineActivation(lid, SPAC_Push);

		ACS_ExecuteAlways(230, 0, ff_i,YES,0);
	}
}

function void tiszaszaki_remove_forcefield(int ff_i)
{
	if ((ff_i >= 0) && (ff_i < forceFieldN))
	{
		int lid=forceField_lid[ff_i];

		if (lid > 0)
		{
			SetLineBlocking(lid, BLOCK_NOTHING);
			SetLineSpecial(lid, 0, 0,0,0,0,0);
			SetLineActivation(lid, SPAC_Cross);

			clear_forcefield_entry(ff_i);
		}
	}
}

function int tiszaszaki_levelinfo(void)
{
	int res=GetLevelInfo(LEVELINFO_LEVELNUM);

	if ((res >= 1) && (res <= 30))
	{
		zone = (res - 1) / 2 + 1;
		act = (res - 1) % 2 + 1;
	}
	else
	{
		zone = 0;
		act = 0;
	}

	return res;
}

function str tiszaszaki_get_time_string(void)
{
	str res="Time:    \cb";

	if ((secs >= 0) && (secs <= 59))
	{
		if(secs < 10)
			res = StrParam(s:res,d:mins,s:":0",d:secs);
		else
			res = StrParam(s:res,d:mins,s:":",d:secs);
	}

	return res;
}

script "tiszaszaki_common_init" OPEN
{
	int i;

	int level_num_temp=tiszaszaki_levelinfo();

	tiszaszaki_dw_chk_water_id = -1;

	tiszaszaki_dw_splash_log = false;

	script212_log = false;
	script904_ang_n = 8;

	show_hud = false;

	//Log(s:"common.acs: Entering level ",d:level_num_temp,s:"...");

	for (i=0;i<deepWaterN;i++)
	{
		inDeepWater[i] = false;
		onWaterSurface[i] = false;
		isTopDownWater[i] = false;
	}

	for (i=0;i<forceFieldN;i++)
		clear_forcefield_entry(i);

	// story levels
	if ((level_num_temp >=  1) && (level_num_temp <= 30))
	{
		bonus_stage_state = NOT_A_BONUS_STAGE;

		endofact = 0;

		killtarget = 0;

		mins = 0, secs = 0;

		if (level_num_temp >= 2)
		{
			killcount = 0;
			secretcount = 0;

			TakeInventory ("BlueCard2", 1);
			TakeInventory ("RedCard2", 1);
			TakeInventory ("YellowCard2", 1);
			TakeInventory ("GreenCard", 1);
			TakeInventory ("PurpleCard", 1);
			TakeInventory ("OrangeCard", 1);

			TakeInventory ("PowerStrength", 1);
			TakeInventory ("PowerInvisibility", 1);
			TakeInventory ("PowerIronFeet", 1);
		}
	}
	// bonus levels
	if ((level_num_temp >= 31) && (level_num_temp <= 35))
	{
		bonus_stage_state = BONUS_STAGE_PLAYING;

		endofstage = 0;

		rings = 0;
		ringcount = 0;
		ringbonus = 0;

		TakeInventory ("PowerInvisibility", 1);
		TakeInventory ("PowerIronFeet", 1);

		setmusic ("z_bonus");

		//delay(10); // ?

		SetWeapon ("Fist");

		if ((level_num_temp >= 31) && (level_num_temp <= 34))
			ACS_Execute(999, 0, 0,0,0);
	}

	// common part of all levels starting
	SetPlayerProperty (1, 0, 5);
	SetActorProperty(0, APROP_Speed, 65536);

	ready = true;

	while (!show_hud) Delay(1);

	// show HUD in story levels
	if ((level_num_temp >=  1) && (level_num_temp <= 30))
	{
		str title_str=zone_titles[zone-1];

		ACS_Execute (300, 0, 0, 0, 0);

		setfont ("BigFont");
		hudmessage (s:tiszaszaki_get_time_string(); 0, 10, CR_GOLD, 0.96, 0.08, 0.0);
		delay(5);
		hudmessage (s:title_str; 2, 0, CR_WHITE, 0.5, 0.46, 5.0, 0.01, 1.0);
		delay(6);
		hudmessage (s:"Act   "; 2, 0, CR_BLUE, 0.5, 0.53, 4.83, 0.01, 1.0);
		hudmessage (s:StrParam(s:"     ",d:act); 2, 0, CR_WHITE, 0.5, 0.53, 4.83, 0.01, 1.0);
		delay(24);

		ACS_Execute (400, 0, 0, 0, 0);
	}
	// show HUD in bonus levels
	if ((level_num_temp >= 31) && (level_num_temp <= 35))
	{
		bonus_lev_num = level_num_temp - 30;
		str title_str_prefix="Bonus Stage";

		setfont ("BigFont");
		if ((level_num_temp >= 32) && (level_num_temp <= 33))
		{
			hudmessage (s:tiszaszaki_get_time_string(); 0, 10, CR_GOLD, 0.96, 0.08, 0.0);

			delay(5);
		}

		hudmessage (s:StrParam(s:title_str_prefix,s:"\cf ",d:bonus_lev_num); 2, 0, CR_WHITE, 0.5, 0.46, 3.0, 0.01, 1.0);
		delay(6);

	}
}

script "tiszaszaki_common_final" UNLOADING
{
	ready = false;
	time_running = false;
}

script "tiszaszaki_common_return" REOPEN
{
	time_running = true;
	ACS_Execute(400, 0, 0,0,0);
}

//// translations

script 301 open		// static translations

{
delay(1);
// Enhanced imp, demon, caco (zone-specific)
if (zone == 1)
	{
	
	}

if (zone == 2)
	{
	CreateTranslation (1, 64:71=156:159, 72:79=9:12);
	CreateTranslation (2, 16:31=155:159, 32:47=9:12, 79:79=12:12);
	CreateTranslation (3, 168:179=156:159, 180:191=9:12, 16:31=156:159, 32:47=9:12, 166:166=159:159, 167:167=9:9, 223:223=9:9);
	}
if (zone == 3)
	{
	CreateTranslation (1, 64:79=160:167);
	CreateTranslation (2, 16:47=160:167, 79:79=167:167);
	CreateTranslation (3, 168:191=160:167, 16:47=160:167,  166:167=163:164,  223:223=164:164);
	}
if (zone == 4)
	{
	CreateTranslation (1, 64:79=32:47);
	CreateTranslation (2, 16:47=32:47, 79:79=47:47);
	CreateTranslation (3, 168:191=32:47, 16:47=32:47, 166:167=40:41, 223:223=40:40);
	}
if (zone == 5)
	{
	CreateTranslation (1, 64:79=128:143);
	CreateTranslation (2, 16:47=128:143, 79:79=143:143);
	CreateTranslation (3, 168:191=128:143, 16:47=128:143, 166:167=136:137, 223:223=138:138);
	}
if (zone == 6)
	{
	CreateTranslation (1, 64:79=208:223);
	CreateTranslation (2, 16:47=208:223, 79:79=223:223);
	CreateTranslation (3, 168:191=208:223, 16:47=208:223, 166:167=216:217, 223:223=216:216);
	}
if (zone == 7)
	{
	CreateTranslation (1, 64:79=144:151);
	CreateTranslation (2, 16:47=64:79, 79:79=79:79);
	CreateTranslation (3, 168:191=64:79, 16:47=64:79, 166:167=72:73, 223:223=72:72);
	}
if (zone == 8)
	{
	CreateTranslation (1, 64:79=80:95);
	CreateTranslation (2, 16:47=80:95, 79:79=95:95);
	CreateTranslation (3, 168:191=80:95, 16:47=80:95, 166:167=88:89, 223:223=88:88);
	}
if (zone == 9)
	{
	CreateTranslation (1, 64:79=96:111);
	CreateTranslation (2, 16:47=96:111, 79:79=111:111);
	CreateTranslation (3, 168:191=96:111, 16:47=96:111, 166:167=104:105, 223:223=104:104);
	}
if (zone == 10)
	{
	CreateTranslation (1, 64:79=176:191);
	CreateTranslation (2, 16:47=176:191, 79:79=191:191);
	CreateTranslation (3, 168:191=176:191, 16:47=176:191, 166:167=179:180, 223:223=179:180);
	}
if (zone == 11)
	{
	CreateTranslation (1, 64:79=112:127);
	CreateTranslation (2, 16:47=112:127, 79:79=127:127);
	CreateTranslation (3, 168:191=112:127, 16:47=112:127, 166:167=120:121, 223:223=120:120);
	}
if (zone == 12)
	{
	CreateTranslation (1, 64:71=220:223, 72:76=232:234, 77:79=235:235);
	CreateTranslation (2, 16:31=220:223, 32:47=232:235, 79:79=235:235);
	CreateTranslation (3, 168:179=220:223, 180:191=232:235, 16:31=220:223, 32:47=232:235, 166:167=222:223, 168:168=232:232, 223:223=232:232);
	}
if (zone == 13)
	{
	CreateTranslation (1, 64:68=250:250, 69:71=251:251, 72:73=252:252, 74:75=253:253, 76:79=254:254);
	CreateTranslation (2, 16:25=250:250, 26:31=251:251, 32:36=252:252, 37:40=253:253, 41:48=254:254, 79:79=254:254);
	CreateTranslation (3, 168:174=250:250, 175:179=251:251, 180:182=252:252, 183:185=253:253, 186:191=254:254, 16:25=250:250, 26:31=251:251, 32:36=252:252, 37:40=253:253, 41:48=254:254, 166:167=251:252, 223:223=252:252);
	}
if (zone == 14)
	{
	CreateTranslation (1, 64:79=192:207);
	CreateTranslation (2, 16:47=192:207, 79:79=207:207);
	CreateTranslation (3, 168:191=192:207, 16:47=192:207, 166:167=200:201, 223:223=200:200);
	}
if (zone == 15)
	{
	CreateTranslation (1, 64:67=240:240, 68:76=241:246, 77:79=0:0);
	CreateTranslation (2, 16:45=240:246, 46:47=0:0, 79:79=0:0);	
	CreateTranslation (3, 168:189=240:246, 190:191=0:0, 16:45=240:246, 46:47=0:0, 166:167=243:244, 223:223=244:244);
}

// Mini cyberdemon
CreateTranslation (4, 16:31=226:231, 32:47=160:167, 168:179=226:231, 180:191=160:167, 208:215=226:231, 216:223=160:167, 232:235=164:167);

// Giant mancubus
CreateTranslation (5, 48:79=16:47, 112:127=176:191, 128:151=24:47, 1:2=46:47, 13:15=39:41, 236:239=42:45);

// Suicidal soul
CreateTranslation (6, 16:47=112:127, 160:167=112:127, 168:191=112:127, 208:223=112:127, 232:235=124:127);

// Revenant Terminator
CreateTranslation (7, 16:40=208:223, 41:47=232:235, 168:185=208:223, 186:191=232:235, 232:235=220:223, 4:4=128:128, 80:95=128:143, 209:210=129:129);

// Rail elemental
CreateTranslation (8, 160:167=192:207, 168:191=192:207, 208:223=192:207, 32:47=192:207, 232:235=203:207);

// Brawler (white)
CreateTranslation (9, 112:127=80:95, 80:95=96:111);

// Berserker (purple)
CreateTranslation (10, 112:116=250:250, 117:119=251:251, 120:121=252:252, 122:123=253:253, 124:127=254:254, 80:95=192:207);

// Chainsawer (tan)
CreateTranslation (11, 112:127=128:143, 80:95=64:79);

// Handgunner (grey)
CreateTranslation (12, 112:127=96:111, 80:81=142:143, 82:82=13:13, 83:83=236:236, 84:84=150:150, 85:85=14:14, 86:86=151:151, 87:87=237:237, 88:88=15:15, 89:91=77:79, 92:93=238:239, 94:95=1:2);

// Shotgunner (orange)
CreateTranslation (13, 112:127=208:223, 80:87=220:223, 88:95=232:235);

// Chaingunner (yellow)
CreateTranslation (14, 112:124=160:166, 125:127=167:167, 80:95=128:143);

// Supershotgunner (red)
CreateTranslation (15, 112:127=176:191, 80:95=32:47);

// Rocketeer (brown)	
CreateTranslation (16, 112:127=64:79, 80:95=144:151);

// Plasmagunner (blue)
CreateTranslation (17, 112:127=192:207, 80:92=240:246, 93:95=0:0);

// Railgunner (indigo)
CreateTranslation (18, 112:114=240:240, 115:124=241:246, 125:127=0:0, 80:84=109:111, 85:92=5:8, 93:95=0:0);

// BigFuckingGunner (green)
CreateTranslation (19, 112:127=112:127, 80:95=152:159);
}


script 302 open		// Envy	(dark green/natural green)

{
	delay (3);
	CreateTranslation (20, 112:127=152:159, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (20, 112:119=156:159, 120:127=9:12, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 303 open		// Lust	(red/dark red)

{
	delay (3);
	CreateTranslation (21, 112:127=176:191, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (21, 112:127=32:47, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 304 open		// Sloth (brown/tan)

{
	delay (3);
	CreateTranslation (22, 112:127=64:79, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (22, 112:127=128:143, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 305 open		// 	Greed (blue/purple)

{
	delay (3);
	CreateTranslation (23, 112:127=192:207, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (23, 112:127=250:254, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 306 open		// Vanity (grey/white)

{
	delay (3);
	CreateTranslation (24, 112:127=96:111, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (24, 112:127=80:95, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 307 open		// Gluttony	(orange/dark orange)

{
	delay (3);
	CreateTranslation (25, 112:119=220:223, 120:127=232:235, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (25, 112:127=208:223, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 308 open		// Pride (yellow/bright yellow)

{
	delay (3);
	CreateTranslation (26, 112:127=160:167, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (26, 112:127=224:231, 152:159=128:143, 9:12=236:239);
	Restart;	
}

script 309 open		// Super Mancubus

{
	delay (2);
	CreateTranslation (27, 48:79=80:111, 128:151=88:111, 16:47=0:0, 160:191=175:191, 112:127=175:191);
	delay (2);
	CreateTranslation (27, 48:79=88:111, 128:151=94:111, 16:47=0:0, 160:191=208:223, 112:127=208:223);
	delay (2);
	CreateTranslation (27, 48:79=96:111, 128:151=100:111, 16:47=0:0, 160:163=224:231, 163:167=160:167, 168:179=224:231, 180:191=160:167, 112:119=224:231, 120:127=160:167);
	delay (2);
	CreateTranslation (27, 48:79=96:111, 128:151=100:111, 16:47=0:0, 160:191=112:127, 112:127=112:127);
	delay (2);
	CreateTranslation (27, 48:79=88:111, 128:151=94:111, 16:47=0:0, 160:191=192:207, 112:127=192:207);
	delay (2);
	CreateTranslation (27, 48:79=80:111, 128:151=88:111, 16:47=0:0, 160:191=250:254, 112:127=250:254);
	Restart;
}

script 310 open		// Super Spiderdemon

{
	delay (2);
	CreateTranslation (28, 48:79=80:111, 128:151=88:111, 16:47=0:0, 160:191=175:191);
	delay (2);
	CreateTranslation (28, 48:79=88:111, 128:151=94:111, 16:47=0:0, 160:191=208:223);
	delay (2);
	CreateTranslation (28, 48:79=96:111, 128:151=100:111, 16:47=0:0, 160:163=224:231, 163:167=160:167, 168:179=224:231, 180:191=160:167);
	delay (2);
	CreateTranslation (28, 48:79=96:111, 128:151=100:111, 16:47=0:0, 160:191=112:127);
	delay (2);
	CreateTranslation (28, 48:79=88:111, 128:151=94:111, 16:47=0:0, 160:191=192:207);
	delay (2);
	CreateTranslation (28, 48:79=80:111, 128:151=88:111, 16:47=0:0, 160:191=250:254);
	Restart;
}

script 311 open		// Super Cyberdemon

{
	delay (2);
	CreateTranslation (29, 48:79=80:111, 128:151=88:111, 16:47=0:0, 160:191=175:191);
	delay (2);
	CreateTranslation (29, 48:79=88:111, 128:151=94:111, 16:47=0:0, 160:191=208:223);
	delay (2);
	CreateTranslation (29, 48:79=96:111, 128:151=100:111, 16:47=0:0, 160:163=224:231, 163:167=160:167, 168:179=224:231, 180:191=160:167);
	delay (2);
	CreateTranslation (29, 48:79=96:111, 128:151=100:111, 16:47=0:0, 160:191=112:127);
	delay (2);
	CreateTranslation (29, 48:79=88:111, 128:151=94:111, 16:47=0:0, 160:191=192:207);
	delay (2);
	CreateTranslation (29, 48:79=80:111, 128:151=88:111, 16:47=0:0, 160:191=250:254);
	Restart;
}

script 312 open		// The Firestarter

{
	delay (2);
	CreateTranslation (30, 112:127=32:47, 152:159=128:143, 9:12=236:239);
	delay (2);
	CreateTranslation (30, 112:127=169:191, 152:159=128:143, 9:12=236:239);
	delay (2);
	CreateTranslation (30, 112:119=220:223, 120:127=232:235, 152:159=128:143, 9:12=236:239);
	delay (2);
	CreateTranslation (30, 112:127=208:223, 152:159=128:143, 9:12=236:239);
	delay (2);
	CreateTranslation (30, 112:127=160:167, 152:159=128:143, 9:12=236:239);
	delay (2);
	CreateTranslation (30, 112:127=224:231, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 313 open		// translation activator

{
Thing_SetTranslation (100, 1);
Thing_SetTranslation (200, 2);
Thing_SetTranslation (300, 3);
Thing_SetTranslation (400, 4);
Thing_SetTranslation (500, 5);
Thing_SetTranslation (600, 6);
Thing_SetTranslation (700, 7);
Thing_SetTranslation (800, 8);

Thing_SetTranslation (709, 9);
Thing_SetTranslation (710, 10);
Thing_SetTranslation (711, 11);
Thing_SetTranslation (712, 12);
Thing_SetTranslation (713, 13);
Thing_SetTranslation (714, 14);
Thing_SetTranslation (715, 15);
Thing_SetTranslation (716, 16);
Thing_SetTranslation (717, 17);
Thing_SetTranslation (718, 18);
Thing_SetTranslation (719, 19);
}

//// end of translations

script 250 (void)					// water splash

{
activatorsound ("splash", 127);
}

str playerClassStr="DoomPlayer";

script 251 (int arg0, int arg1)				// spring (horizontal)

{
str activatorClass=GetActorClass(0);
bool b=true;//(activatorClass == playerClassStr);
if (b)
{
activatorsound ("spring", 127);
ThrustThing (arg1, arg0, 1);
}
}

script 252 (int arg0, int arg1)				// spring (vertical)

{
str activatorClass=GetActorClass(0);
bool b=true;//(activatorClass == playerClassStr);
if (b)
{
activatorsound ("spring", 127);
ThrustThingZ (0, arg0, arg1, 0);
}
}

//// weapons/items

int ammo1;
int capacity1;
int ammo2;
int capacity2;
int ammo3;
int capacity3;
int ammo4;
int capacity4;
int ammo5;
int capacity5;
int weapon1;
int weapon2;
int weapon3;
int weapon33;
int weapon4;
int weapon5;
int weapon6;
int weapon7;
int weapon8;
int pack;
int health;
int armour;

#libdefine T_BAZOOKA 170

script 233 ENTER					// player TID changer

{
Thing_ChangeTID (0, PlayerNumber()+1337);
}

script 234 ENTER					// clip checker

{
ammo1 = CheckInventory ("Clip");

if(ammo1 < capacity1)
{
    setthingspecial (1020, 249, 0, 20, 0, 0);
}

if(ammo1 == capacity1)
{
    setthingspecial (1020, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 235 ENTER					// rocket checker

{
ammo3 = CheckInventory ("RocketAmmo");

if(ammo3 < capacity3)
{
    setthingspecial (1051, 226, 249, 0, 51, 0, 0);
    setthingspecial (1055, 226, 249, 0, 55, 0, 0);
}

if(ammo3 == capacity3)
{
    setthingspecial (1051, 0, 0, 0, 0, 0, 0);
    setthingspecial (1055, 0, 0, 0, 0, 0, 0);
}


delay(1);
Restart;
}

script 236 ENTER					// chainsaw checker

{
weapon1 = CheckInventory ("Chainsaw");

if(weapon1 == 0)
{
    setthingspecial (1001, 226, 249, 0, 1, 0, 0);
}

if(weapon1 > 0)
{
    setthingspecial (1001, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 237 ENTER					// pistol checker

{
weapon2 = CheckInventory ("Pistol");
ammo1 = CheckInventory ("Clip");

if(ammo1 < capacity1)
{
    setthingspecial (1002, 226, 249, 0, 2, 0, 0);
}

if(weapon2 == 0)
if(ammo1 == capacity1)
{
    setthingspecial (1002, 226, 249, 0, 2, 0, 0);
}

if(weapon2 > 0)
if(ammo1 == capacity1)
{
    setthingspecial (1002, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 238 ENTER					// shotgun checker

{
weapon3 = CheckInventory ("Shotgun");
ammo2 = CheckInventory ("Shell");

if(ammo2 < capacity2)
{
    setthingspecial (1003, 226, 249, 0, 3, 0, 0);
}

if(weapon3 == 0)
if(ammo2 == capacity2)
{
    setthingspecial (1003, 226, 249, 0, 3, 0, 0);
}

if(weapon3 > 0)
if(ammo2 == capacity2)
{
    setthingspecial (1003, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 239 ENTER					// super shotgun checker

{
weapon33 = CheckInventory ("SuperShotgun");
ammo2 = CheckInventory ("Shell");

if(ammo2 < capacity2)
{
    setthingspecial (1033, 226, 249, 0, 33, 0, 0);
}

if(weapon33 == 0)
if(ammo2 == capacity2)
{
    setthingspecial (1033, 226, 249, 0, 33, 0, 0);
}

if(weapon33 > 0)
if(ammo2 == capacity2)
{
    setthingspecial (1033, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}


script 240 ENTER					// chaingun checker

{
weapon4 = CheckInventory ("Chaingun");
ammo1 = CheckInventory ("Clip");

if(ammo1 < capacity1)
{
    setthingspecial (1004, 226, 249, 0, 4, 0, 0);
}

if(weapon4 == 0)
if(ammo1 == capacity1)
{
    setthingspecial (1004, 226, 249, 0, 4, 0, 0);
}

if(weapon4 > 0)
if(ammo1 == capacity1)
{
    setthingspecial (1004, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 241 ENTER					// rocket launcher checker

{
weapon5 = CheckInventory ("PhoenixRod");
ammo3 = CheckInventory ("RocketAmmo");

if(ammo3 < capacity3)
{
    setthingspecial (1005, 226, 249, 0, 5, 0, 0);
}

if(weapon5 == 0)
if(ammo3 == capacity3)
{
    setthingspecial (1005, 226, 249, 0, 5, 0, 0);
}

if(weapon5 > 0)
if(ammo3 == capacity3)
{
    setthingspecial (1005, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 242 ENTER					// plasma gun checker

{
weapon6 = CheckInventory ("PlasmaRifle");
ammo4 = CheckInventory ("Cell");

if(ammo4 < capacity4)
{
    setthingspecial (1006, 226, 249, 0, 6, 0, 0);
}

if(weapon6 == 0)
if(ammo4 == capacity4)
{
    setthingspecial (1006, 226, 249, 0, 6, 0, 0);
}

if(weapon6 > 0)
if(ammo4 == capacity4)
{
    setthingspecial (1006, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 243 ENTER					// bfg checker

{
weapon7 = CheckInventory ("BFG9000");
ammo4 = CheckInventory ("Cell");

if(ammo4 < capacity4)
{
    setthingspecial (1007, 226, 249, 0, 7, 0, 0);
}

if(weapon7 == 0)
if(ammo4 == capacity4)
{
    setthingspecial (1007, 226, 249, 0, 7, 0, 0);
}

if(weapon7 > 0)
if(ammo4 == capacity4)
{
    setthingspecial (1007, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 244 ENTER					// railgun checker

{
weapon8 = CheckInventory ("RocketLauncher");
ammo4 = CheckInventory ("Cell");

if(ammo4 < capacity4)
{
    setthingspecial (1008, 226, 249, 0, 8, 0, 0);
}

if(weapon8 == 0)
if(ammo4 == capacity4)
{
    setthingspecial (1008, 226, 249, 0, 8, 0, 0);
}

if(weapon8 > 0)
if(ammo4 == capacity4)
{
    setthingspecial (1008, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 245 ENTER					// flame orb/rocket checker

{
ammo3 = CheckInventory ("RocketAmmo");
ammo5 = CheckInventory ("PhoenixRodAmmo");

if(ammo5 < ammo3)
{
    TakeInventory ("RocketAmmo", ammo3 - ammo5);
}

if(ammo5 > ammo3)
{
    GiveInventory ("RocketAmmo", ammo5 - ammo3);
}
delay(1);
Restart;
}

script 246 (void)					// ring

{
GiveInventory ("HealthBonus", 1);
}

script 247 (void)					// backpack

{

}

script 248 ENTER					// capacity checker

{
pack = CheckInventory ("Backpack");

if(pack == 0)
{
    capacity1 = 150;
    capacity2 = 40;
    capacity3 = 20;
    capacity4 = 200;
}

if(pack > 0)
{
    capacity1 = 300;
    capacity2 = 80;
    capacity3 = 40;
    capacity4 = 400;
}
delay(1);
Restart;
}

script 249 (int arg0)					// grab stuff

{
if(arg0 == 1)
{
    GiveInventory ("Chainsaw", 1);
}

if(arg0 == 2)
{
    GiveInventory ("Pistol", 1);
}

if(arg0 == 20)
{
    GiveInventory ("Clip", 1);
}

if(arg0 == 3)
{
    GiveInventory ("Shotgun", 1);
}

if(arg0 == 33)
{
    GiveInventory ("SuperShotgun", 1);
}

if(arg0 == 4)
{
    GiveInventory ("Chaingun", 1);
}

if(arg0 == 5)
{
    GiveInventory ("PhoenixRod", 1);
}

if(arg0 == 51)
{
    GiveInventory ("PhoenixRodAmmo", 1);
}

if(arg0 == 55)
{
    GiveInventory ("PhoenixRodAmmo", 5);
}

if(arg0 == 6)
{
    GiveInventory ("PlasmaRifle", 1);
}

if(arg0 == 7)
{
    GiveInventory ("BFG9000", 1);
}

if(arg0 == 8)
{
    GiveInventory ("RocketLauncher", 1);
}

if(arg0 == 50)
{
GiveInventory ("ArmorBonus", (50 - armour));
}

if(arg0 == 200)
{
   GiveInventory ("HealthBonus", 50);
}

}

script 253 ENTER					// golden health potion checker

{
health =  CheckInventory ("Health");

if(health < 200)
{
   setthingspecial (1200, 226, 249, 0, 200, 0, 0);
}

if(health == 200)
{
   setthingspecial (1200, 0, 0, 0, 0, 0, 0);
}
delay(1);
Restart;
}

script 254 ENTER					// light armour checker

{
armour =  CheckInventory ("Armor");

if(armour < 50)
{
   setthingspecial (1050, 226, 249, 0, 50, 0, 0);
}

if(armour > 49)
{
   setthingspecial (1050, 0, 0, 0, 0, 0, 0);
}
delay(1);
Restart;
}

//// end of weapons/items

// useful functions (by tiszaszaki)

function int min(int a, int b)
{
	int res=b;
	if (a < b) res = a;
	return res;
}

function int max(int a, int b)
{
	int res=b;
	if (a > b) res = a;
	return res;
}

//// SCORES.ACS

global int 1:score;
int timebonus_unit_down = 50;
int timebonus_unit = 1000;
int timebonus = 100000;
int killbonus_unit = 250;
int secretbonus_unit = 250;
int rundown_dl=2;

function void tiszaszaki_get_rings(int ring_n, int bonus_am, int max_ring_n)
{
	if ((ring_n != 0) && (max_ring_n > 0))
	{
		int new_rings=rings + ring_n;

		if ((new_rings >= 0) && (new_rings <= max_ring_n))
			rings = new_rings;

		if (ring_n > 0)
			ringbonus += bonus_am;
	}
}

script 231 (int killtarget2,int killcount2)					// killtarget checker

{
print(d:killtarget2);
delay(105);
print(d:killcount2);
}

script 232 (int killtarget2)					// killtarget

{
killtarget2++;
}

script 300 (void)						// score display

{
setfont ("BigFont");
hudmessage (s:"score:    \cc",d:score; 0, 9, CR_GOLD, 0.96, 0.02, 0.0);
delay(1);
Restart;
}

function void tiszaszaki_time_run_seconds(int s, bool reverse)
{
	if ((mins >= 0) && (secs >= 0) && ((reverse && (s <= (mins * 60 + secs))) || !reverse))
	{
		if (reverse)
			secs -= s;
		else
			secs += s;

		if ((secs < 0) || (secs > 59))
		{
			if (reverse)
			{
				while ((secs < 0) && (mins > 0))
					mins -= 1, secs += 60;
			}
			if (!reverse)
			{
				while (secs >= 60)
					mins += 1, secs -= 60;
			}
		}
	}
}

script 400 (int skipbonus, int reverse_i)			// time display

{
	bool reverse=(reverse_i != 0);

	time_running = true;

	while (time_running)
	{
		tiszaszaki_time_run_seconds(1, reverse);

		setfont ("BigFont");
		hudmessage (s:tiszaszaki_get_time_string(); 0, 10, CR_GOLD, 0.96, 0.08, 0.0);

		if((!skipbonus) && (timebonus != 0))
		{
			if(timebonus < timebonus_unit_down)
				timebonus = 0;
			else
				timebonus -= timebonus_unit_down;
		}

		if(reverse && (mins == 0) && (secs == 0))
			terminate;

		delay(35);
	}
}

script 500 (void)					// time bonus rundown

{
if(timebonus == 0)
{
	ACS_NamedExecuteAlways ("tiszaszaki_after_scoring", 0, 0, 0, 0);
	delay(rundown_dl);
	//terminate;
}
else
{
	int timebonus_temp=timebonus;
	if(timebonus <= timebonus_unit)
		timebonus = 0;
	else
		timebonus -= timebonus_unit;
	hudmessage (s:"time bonus:   \cc",d:timebonus; 0, 6, CR_GOLD, 0.5, 0.47, 0.0);
	score += min(timebonus_unit,timebonus_temp);
	activatorsound ("button1", 127);
	delay(rundown_dl);
	Restart;
}
}

script 600 (void)					// kill bonus rundown

{
if(killbonus == 0)
{
	ACS_NamedExecuteAlways ("tiszaszaki_after_scoring", 0, 0, 0, 0);
	delay(rundown_dl);
	//terminate;
}
else
{
	int killbonus_temp=killbonus;
	if (killbonus <= killbonus_unit)
		killbonus = 0;
	else
		killbonus -= killbonus_unit;
	hudmessage (s:"kill bonus:   \cc",d:killbonus; 0, 7, CR_GOLD, 0.5, 0.52, 0.0);
	score += min(killbonus_unit,killbonus_temp);
	activatorsound ("button1", 127);
	delay(rundown_dl);
	Restart;
}
}

script 700 (void)					// secret bonus rundown

{
if(secretbonus == 0)
{
	ACS_NamedExecuteAlways ("tiszaszaki_after_scoring", 0, 0, 0, 0);
	delay(rundown_dl);
	//terminate;
}
else
{
	int secretbonus_temp=secretbonus;
	if (secretbonus <= secretbonus_unit)
		secretbonus = 0;
	else
		secretbonus -= secretbonus_unit;
	hudmessage (s:"secret bonus:   \cc",d:secretbonus; 0, 8, CR_GOLD, 0.5, 0.57, 0.0);
	score += min(secretbonus_unit,secretbonus_temp);
	activatorsound ("button1", 127);
	delay(rundown_dl);
	Restart;
}
}

// bonus level specific scripts

script 900 (void)					// ring bonus rundown

{
if(ringbonus == 0)
{
	ACS_NamedExecuteAlways ("tiszaszaki_after_scoring", 0, 0, 0, 0);
	delay(1);
	terminate;
}
else
{
	ringbonus -= 100;
	hudmessage (s:"ring bonus:   \cc",d:ringbonus; 0, 6, CR_GOLD, 0.5, 0.47, 0.0);
	score += 100;
	activatorsound ("button1", 127);
}
delay(1);
Restart;
}

script 999 (void)					// ring display

{
setfont ("BigFont");
hudmessage (s:"rings:    \cc",d:rings; 0, 9, CR_GOLD, 0.96, 0.02, 0.0);
delay(1);
Restart;
}

// monitor pickup scripts

script 201 (int arg0)				// health monitor

{
Thing_Remove (arg0);
activatorsound ("monitor", 127);
delay(35);
GiveInventory ("HealthBonus", 10);
activatorsound ("ring", 127);
}

script 202 (int arg0)				// armour monitor

{
Thing_Remove (arg0);
activatorsound ("monitor", 127);
delay(35);
GiveInventory ("ArmorBonus", 10);
activatorsound ("ishield", 127);
}

str frames[14] = {"1", "2", "3", "4", "5", "6", "7", "6", "5", "4", "3", "2", "1", "0"};

script 203 (int arg0)               // invincibility monitor 

{
Thing_Remove (arg0); 
activatorsound ("monitor", 127); 
delay(5); 
SetMusic ("z_invuln"); 
delay(30);
SetPlayerProperty (1, 2, 5); 
ACS_ExecuteAlways (209, 0, 776, 0, 0); 
delay(3); 
ACS_ExecuteAlways (209, 0, 777, 0, 0); 
delay(3); 
ACS_ExecuteAlways (209, 0, 778, 0, 0);
delay(3); 
ACS_ExecuteAlways (209, 0, 779, 0, 0); 
delay(3); 
ACS_ExecuteAlways (209, 0, 780, 0, 0);
delay(700);
sethudsize (0, 0, 0);
SetPlayerProperty (1, 0, 5); 
SetMusic ("zone01a1"); 
}

script 209 (int arg0) 

{
for(int time = 0; time < 50; time++)
{
sethudsize (512, 384, 0);
setfont ("Stars"); 
int x = random(48, 208) * 2.0, y = random(24, 128) * 2.0;
for(int stars = 0; stars < 14; stars++) 
{ 
hudmessage(s:frames[stars]; 0, arg0, -1, x, y, 0.02); 
delay(1); 
}
}
}

script 204 (int arg0)				// invisibility monitor

{
Thing_Remove (arg0);
activatorsound ("monitor", 127);
delay(35);
GiveInventory ("BlurSphere", 1);
activatorsound ("bshield", 127);
}

script 205 (int arg0)				// rad monitor

{
Thing_Remove (arg0);
activatorsound ("monitor", 127);
delay(35);
GiveInventory ("RadSuit", 1);
activatorsound ("wshield", 127);
}

script 206 (int arg0)				// extra life monitor

{
Thing_Remove (arg0);
activatorsound ("monitor", 127);
delay(35);
GiveInventory ("Megasphere", 1);
activatorsound ("powerup", 127);
}

script 207 (int arg0)				// speed monitor

{
Thing_Remove (arg0);
activatorsound ("monitor", 127);
delay(35);
activatorsound ("speedon", 127);
SetActorProperty(0, APROP_Speed, GetActorProperty(0, APROP_Speed) * 2); 
delay(1050);
activatorsound ("speedoff", 127);
SetActorProperty(0, APROP_Speed, GetActorProperty(0, APROP_Speed) / 2);
}

//

script "tiszaszaki_end_scoring" (void)
{
if (bonus_stage_state == NOT_A_BONUS_STAGE)
{
ACS_Terminate (400, 0);
SetPlayerProperty (1, 1, 4);
SetPlayerProperty (1, 2, 5);
SetWeapon ("Fist");
SetMusic ("");
delay(105);
SetMusic ("z_inter");
setfont ("BigFont");
hudmessage (s:"DamaGe        "; 0, 3, CR_GREEN, 0.5, 0.32, 0.0);
hudmessage (s:"            got"; 0, 4, CR_WHITE, 0.5, 0.32, 0.0);
hudmessage (s:"through act ",d:act,s:" "; 0, 5, CR_WHITE, 0.5, 0.37, 0.0);
setfont ("SmallFont");
delay(35);
hudmessage (s:"time bonus:   \cc",d:timebonus; 0, 6, CR_GOLD, 0.5, 0.47, 0.0);
delay(35);
hudmessage (s:"kill bonus:   \cc",d:killbonus; 0, 7, CR_GOLD, 0.5, 0.52, 0.0);
delay(35);
hudmessage (s:"secret bonus:   \cc",d:secretbonus; 0, 8, CR_GOLD, 0.5, 0.57, 0.0);
delay(55);
SetMusic ("");
delay(35);
ACS_Execute (500, 0, 0, 0, 0);
ACS_Execute (600, 0, 0, 0, 0);
ACS_Execute (700, 0, 0, 0, 0);
}
if ((bonus_stage_state == BONUS_STAGE_WIN) || (bonus_stage_state == BONUS_STAGE_LOSE))
{
ACS_Terminate (999, 0);
ACS_Execute (300, 0, 0, 0, 0);
SetMusic ("");
delay(105);
SetMusic ("z_inter");
setfont ("BigFont");
hudmessage (s:"bonus stage ",d:bonus_lev_num; 0, 3, CR_WHITE, 0.5, 0.32, 0.0);
setfont ("SmallFont");
delay(35);
hudmessage (s:"ring bonus:   \cc",d:ringbonus; 0, 6, CR_GOLD, 0.5, 0.47, 0.0);
delay(125);
SetMusic ("");
delay(35);
ACS_Execute (900, 0, 0, 0, 0);
}
}

script "tiszaszaki_after_scoring" (void)
{
if (bonus_stage_state == NOT_A_BONUS_STAGE)
{
endofact++;
if (endofact == 3)
{
ambientsound ("endofact", 127);
delay(105);
hudmessage (s:""; 0, 3, 0, 0, 0, 0);
hudmessage (s:""; 0, 4, 0, 0, 0, 0);
hudmessage (s:""; 0, 5, 0, 0, 0, 0);
hudmessage (s:""; 0, 6, 0, 0, 0, 0);
hudmessage (s:""; 0, 7, 0, 0, 0, 0);
hudmessage (s:""; 0, 8, 0, 0, 0, 0);
SetPlayerProperty (1, 0, 4);
SetPlayerProperty (1, 0, 5);
ACS_ExecuteAlways (800, 0, 0, 0, 0);
}
}
if ((bonus_stage_state == BONUS_STAGE_WIN) || (bonus_stage_state == BONUS_STAGE_LOSE))
{
endofstage++;
if (endofstage == 1)
{
ambientsound ("endofact", 127);
delay(105);
hudmessage (s:""; 0, 3, 0, 0, 0, 0);
hudmessage (s:""; 0, 4, 0, 0, 0, 0);
hudmessage (s:""; 0, 6, 0, 0, 0, 0);
hudmessage (s:""; 0, 7, 0, 0, 0, 0);
hudmessage (s:""; 0, 8, 0, 0, 0, 0);
if ((bonus_lev_num >= 1) && (bonus_lev_num <= 4))
SetPlayerProperty (1, 0, 4);
if (bonus_lev_num >= 4)
SetPlayerProperty (1, 0, 3);
activatorsound ("teleport3", 127);
delay(35);
ACS_ExecuteAlways (800, 0, 0, 0, 0);
}
}
}