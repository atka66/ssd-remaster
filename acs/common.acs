#include "zcommon.acs"

int zone;
int deepWaterN = 128;
bool inDeepWater[128];
bool onWaterSurface[128];

// spawn IDs (by tiszaszaki)

#define T_GREENARMOUR T_GREENARMOR

#define T_BOOM 161
#define T_ICEJET 223
#define T_FIREJET 224
#define T_MINE 20077
#define T_HEXENARROW 209

#define T_REIVERFIREBALL 207
#define T_REIVERFIREBALL2 212
#define T_IMPFIREBALL2 201
#define T_CACOFIREBALL 126
#define T_CACOFIREBALL2 202
#define T_ARACHNOTRONPLASMA2 205
#define T_MANCUBUSFIREBALL 204
#define T_BARONFIREBALL 203
#define T_BLOODSCOURGESHOT 208

#define T_BANBALL 215
#define T_BANIPBALL 216

#define T_ENHANCEDDEMON 30017
#define T_ENHANCEDCACODEMON 30020
#define T_ENHANCEDIMP 30015
#define T_MINICYBERDEMON 23

#define T_FIREBOMB 217
#define T_MACE2 211
#define T_ROCKET2 116
#define T_TRACER2 9

#define T_PLASMABOLT2 206

#define T_SPHERE 189
#define T_RING 167

// deep water effect scripts (by tiszaszaki)

script 901 (int i) // in
{
    if (!inDeepWater[i])
    {
        PlaySound(0,"splash");
        inDeepWater[i]=true;
    }
}

script 902 (int i) // out
{
    if (inDeepWater[i])
    {
        PlaySound(0,"splash");
        inDeepWater[i]=false;
    }
}

script 210 (int i, int wtag, int wtid)
{
    if (!onWaterSurface[i])
    {
        onWaterSurface[i]=true;
        ACS_Execute(903, 0, i,wtag,wtid);
    }
}

script 211 (int i)
{
    if (onWaterSurface[i])
    {
        onWaterSurface[i]=false;
    }
}

script 903 (int i, int wtag, int wtid)
{
    while (onWaterSurface[i])
    {
        int x=GetActorX(wtid);
        int y=GetActorX(wtid);
        int sfloor=GetSectorFloorZ(wtag, x,y);
        int playerEyeHeight=(GetActorZ(0) - sfloor) + GetActorViewHeight(0); // ( - GetActorFloorZ(0)) +
        int waterSurfaceHeight=GetSectorCeilingZ(wtag, x,y) - sfloor;
        int dl=2;
        if (playerEyeHeight <= waterSurfaceHeight)
            ACS_Execute(901, 0, i,0,0);
        else
            ACS_Execute(902, 0, i,0,0);
        //Log(d:playerEyeHeight >> 16, s:"<=", d:waterSurfaceHeight >> 16, s:"?");
        Delay(dl);
    }
}

script 900 OPEN
{
	for (int i=0;i<deepWaterN;i++)
	{
		inDeepWater[i] = false;
		onWaterSurface[i] = false;
	}
}

//// translations

script 301 open		// static translations

{
delay(1);
// Enhanced imp, demon, caco (zone-specific)
if (zone == 1)
	{
	
	}

if (zone == 2)
	{
	CreateTranslation (1, 64:71=156:159, 72:79=9:12);
	CreateTranslation (2, 16:31=155:159, 32:47=9:12, 79:79=12:12);
	CreateTranslation (3, 168:179=156:159, 180:191=9:12, 16:31=156:159, 32:47=9:12, 166:166=159:159, 167:167=9:9, 223:223=9:9);
	}
if (zone == 3)
	{
	CreateTranslation (1, 64:79=160:167);
	CreateTranslation (2, 16:47=160:167, 79:79=167:167);
	CreateTranslation (3, 168:191=160:167, 16:47=160:167,  166:167=163:164,  223:223=164:164);
	}
if (zone == 4)
	{
	CreateTranslation (1, 64:79=32:47);
	CreateTranslation (2, 16:47=32:47, 79:79=47:47);
	CreateTranslation (3, 168:191=32:47, 16:47=32:47, 166:167=40:41, 223:223=40:40);
	}
if (zone == 5)
	{
	CreateTranslation (1, 64:79=128:143);
	CreateTranslation (2, 16:47=128:143, 79:79=143:143);
	CreateTranslation (3, 168:191=128:143, 16:47=128:143, 166:167=136:137, 223:223=138:138);
	}
if (zone == 6)
	{
	CreateTranslation (1, 64:79=208:223);
	CreateTranslation (2, 16:47=208:223, 79:79=223:223);
	CreateTranslation (3, 168:191=208:223, 16:47=208:223, 166:167=216:217, 223:223=216:216);
	}
if (zone == 7)
	{
	CreateTranslation (1, 64:79=144:151);
	CreateTranslation (2, 16:47=64:79, 79:79=79:79);
	CreateTranslation (3, 168:191=64:79, 16:47=64:79, 166:167=72:73, 223:223=72:72);
	}
if (zone == 8)
	{
	CreateTranslation (1, 64:79=80:95);
	CreateTranslation (2, 16:47=80:95, 79:79=95:95);
	CreateTranslation (3, 168:191=80:95, 16:47=80:95, 166:167=88:89, 223:223=88:88);
	}
if (zone == 9)
	{
	CreateTranslation (1, 64:79=96:111);
	CreateTranslation (2, 16:47=96:111, 79:79=111:111);
	CreateTranslation (3, 168:191=96:111, 16:47=96:111, 166:167=104:105, 223:223=104:104);
	}
if (zone == 10)
	{
	CreateTranslation (1, 64:79=176:191);
	CreateTranslation (2, 16:47=176:191, 79:79=191:191);
	CreateTranslation (3, 168:191=176:191, 16:47=176:191, 166:167=179:180, 223:223=179:180);
	}
if (zone == 11)
	{
	CreateTranslation (1, 64:79=112:127);
	CreateTranslation (2, 16:47=112:127, 79:79=127:127);
	CreateTranslation (3, 168:191=112:127, 16:47=112:127, 166:167=120:121, 223:223=120:120);
	}
if (zone == 12)
	{
	CreateTranslation (1, 64:71=220:223, 72:76=232:234, 77:79=235:235);
	CreateTranslation (2, 16:31=220:223, 32:47=232:235, 79:79=235:235);
	CreateTranslation (3, 168:179=220:223, 180:191=232:235, 16:31=220:223, 32:47=232:235, 166:167=222:223, 168:168=232:232, 223:223=232:232);
	}
if (zone == 13)
	{
	CreateTranslation (1, 64:68=250:250, 69:71=251:251, 72:73=252:252, 74:75=253:253, 76:79=254:254);
	CreateTranslation (2, 16:25=250:250, 26:31=251:251, 32:36=252:252, 37:40=253:253, 41:48=254:254, 79:79=254:254);
	CreateTranslation (3, 168:174=250:250, 175:179=251:251, 180:182=252:252, 183:185=253:253, 186:191=254:254, 16:25=250:250, 26:31=251:251, 32:36=252:252, 37:40=253:253, 41:48=254:254, 166:167=251:252, 223:223=252:252);
	}
if (zone == 14)
	{
	CreateTranslation (1, 64:79=192:207);
	CreateTranslation (2, 16:47=192:207, 79:79=207:207);
	CreateTranslation (3, 168:191=192:207, 16:47=192:207, 166:167=200:201, 223:223=200:200);
	}
if (zone == 15)
	{
	CreateTranslation (1, 64:67=240:240, 68:76=241:246, 77:79=0:0);
	CreateTranslation (2, 16:45=240:246, 46:47=0:0, 79:79=0:0);	
	CreateTranslation (3, 168:189=240:246, 190:191=0:0, 16:45=240:246, 46:47=0:0, 166:167=243:244, 223:223=244:244);
}

// Mini cyberdemon
CreateTranslation (4, 16:31=226:231, 32:47=160:167, 168:179=226:231, 180:191=160:167, 208:215=226:231, 216:223=160:167, 232:235=164:167);

// Giant mancubus
CreateTranslation (5, 48:79=16:47, 112:127=176:191, 128:151=24:47, 1:2=46:47, 13:15=39:41, 236:239=42:45);

// Suicidal soul
CreateTranslation (6, 16:47=112:127, 160:167=112:127, 168:191=112:127, 208:223=112:127, 232:235=124:127);

// Revenant Terminator
CreateTranslation (7, 16:40=208:223, 41:47=232:235, 168:185=208:223, 186:191=232:235, 232:235=220:223, 4:4=128:128, 80:95=128:143, 209:210=129:129);

// Rail elemental
CreateTranslation (8, 160:167=192:207, 168:191=192:207, 208:223=192:207, 32:47=192:207, 232:235=203:207);

// Brawler (white)
CreateTranslation (9, 112:127=80:95, 80:95=96:111);

// Berserker (purple)
CreateTranslation (10, 112:116=250:250, 117:119=251:251, 120:121=252:252, 122:123=253:253, 124:127=254:254, 80:95=192:207);

// Chainsawer (tan)
CreateTranslation (11, 112:127=128:143, 80:95=64:79);

// Handgunner (grey)
CreateTranslation (12, 112:127=96:111, 80:81=142:143, 82:82=13:13, 83:83=236:236, 84:84=150:150, 85:85=14:14, 86:86=151:151, 87:87=237:237, 88:88=15:15, 89:91=77:79, 92:93=238:239, 94:95=1:2);

// Shotgunner (orange)
CreateTranslation (13, 112:127=208:223, 80:87=220:223, 88:95=232:235);

// Chaingunner (yellow)
CreateTranslation (14, 112:124=160:166, 125:127=167:167, 80:95=128:143);

// Supershotgunner (red)
CreateTranslation (15, 112:127=176:191, 80:95=32:47);

// Rocketeer (brown)	
CreateTranslation (16, 112:127=64:79, 80:95=144:151);

// Plasmagunner (blue)
CreateTranslation (17, 112:127=192:207, 80:92=240:246, 93:95=0:0);

// Railgunner (indigo)
CreateTranslation (18, 112:114=240:240, 115:124=241:246, 125:127=0:0, 80:84=109:111, 85:92=5:8, 93:95=0:0);

// BigFuckingGunner (green)
CreateTranslation (19, 112:127=112:127, 80:95=152:159);
}


script 302 open		// Envy	(dark green/natural green)

{
	delay (3);
	CreateTranslation (20, 112:127=152:159, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (20, 112:119=156:159, 120:127=9:12, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 303 open		// Lust	(red/dark red)

{
	delay (3);
	CreateTranslation (21, 112:127=176:191, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (21, 112:127=32:47, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 304 open		// Sloth (brown/tan)

{
	delay (3);
	CreateTranslation (22, 112:127=64:79, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (22, 112:127=128:143, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 305 open		// 	Greed (blue/purple)

{
	delay (3);
	CreateTranslation (23, 112:127=192:207, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (23, 112:127=250:254, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 306 open		// Vanity (grey/white)

{
	delay (3);
	CreateTranslation (24, 112:127=96:111, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (24, 112:127=80:95, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 307 open		// Gluttony	(orange/dark orange)

{
	delay (3);
	CreateTranslation (25, 112:119=220:223, 120:127=232:235, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (25, 112:127=208:223, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 308 open		// Pride (yellow/bright yellow)

{
	delay (3);
	CreateTranslation (26, 112:127=160:167, 152:159=128:143, 9:12=236:239);
	delay (3);
	CreateTranslation (26, 112:127=224:231, 152:159=128:143, 9:12=236:239);
	Restart;	
}

script 309 open		// Super Mancubus

{
	delay (2);
	CreateTranslation (27, 48:79=80:111, 128:151=88:111, 16:47=0:0, 160:191=175:191, 112:127=175:191);
	delay (2);
	CreateTranslation (27, 48:79=88:111, 128:151=94:111, 16:47=0:0, 160:191=208:223, 112:127=208:223);
	delay (2);
	CreateTranslation (27, 48:79=96:111, 128:151=100:111, 16:47=0:0, 160:163=224:231, 163:167=160:167, 168:179=224:231, 180:191=160:167, 112:119=224:231, 120:127=160:167);
	delay (2);
	CreateTranslation (27, 48:79=96:111, 128:151=100:111, 16:47=0:0, 160:191=112:127, 112:127=112:127);
	delay (2);
	CreateTranslation (27, 48:79=88:111, 128:151=94:111, 16:47=0:0, 160:191=192:207, 112:127=192:207);
	delay (2);
	CreateTranslation (27, 48:79=80:111, 128:151=88:111, 16:47=0:0, 160:191=250:254, 112:127=250:254);
	Restart;
}

script 310 open		// Super Spiderdemon

{
	delay (2);
	CreateTranslation (28, 48:79=80:111, 128:151=88:111, 16:47=0:0, 160:191=175:191);
	delay (2);
	CreateTranslation (28, 48:79=88:111, 128:151=94:111, 16:47=0:0, 160:191=208:223);
	delay (2);
	CreateTranslation (28, 48:79=96:111, 128:151=100:111, 16:47=0:0, 160:163=224:231, 163:167=160:167, 168:179=224:231, 180:191=160:167);
	delay (2);
	CreateTranslation (28, 48:79=96:111, 128:151=100:111, 16:47=0:0, 160:191=112:127);
	delay (2);
	CreateTranslation (28, 48:79=88:111, 128:151=94:111, 16:47=0:0, 160:191=192:207);
	delay (2);
	CreateTranslation (28, 48:79=80:111, 128:151=88:111, 16:47=0:0, 160:191=250:254);
	Restart;
}

script 311 open		// Super Cyberdemon

{
	delay (2);
	CreateTranslation (29, 48:79=80:111, 128:151=88:111, 16:47=0:0, 160:191=175:191);
	delay (2);
	CreateTranslation (29, 48:79=88:111, 128:151=94:111, 16:47=0:0, 160:191=208:223);
	delay (2);
	CreateTranslation (29, 48:79=96:111, 128:151=100:111, 16:47=0:0, 160:163=224:231, 163:167=160:167, 168:179=224:231, 180:191=160:167);
	delay (2);
	CreateTranslation (29, 48:79=96:111, 128:151=100:111, 16:47=0:0, 160:191=112:127);
	delay (2);
	CreateTranslation (29, 48:79=88:111, 128:151=94:111, 16:47=0:0, 160:191=192:207);
	delay (2);
	CreateTranslation (29, 48:79=80:111, 128:151=88:111, 16:47=0:0, 160:191=250:254);
	Restart;
}

script 312 open		// The Firestarter

{
	delay (2);
	CreateTranslation (30, 112:127=32:47, 152:159=128:143, 9:12=236:239);
	delay (2);
	CreateTranslation (30, 112:127=169:191, 152:159=128:143, 9:12=236:239);
	delay (2);
	CreateTranslation (30, 112:119=220:223, 120:127=232:235, 152:159=128:143, 9:12=236:239);
	delay (2);
	CreateTranslation (30, 112:127=208:223, 152:159=128:143, 9:12=236:239);
	delay (2);
	CreateTranslation (30, 112:127=160:167, 152:159=128:143, 9:12=236:239);
	delay (2);
	CreateTranslation (30, 112:127=224:231, 152:159=128:143, 9:12=236:239);
	Restart;
}

script 313 open		// translation activator

{
Thing_SetTranslation (100, 1);
Thing_SetTranslation (200, 2);
Thing_SetTranslation (300, 3);
Thing_SetTranslation (400, 4);
Thing_SetTranslation (500, 5);
Thing_SetTranslation (600, 6);
Thing_SetTranslation (700, 7);
Thing_SetTranslation (800, 8);

Thing_SetTranslation (709, 9);
Thing_SetTranslation (710, 10);
Thing_SetTranslation (711, 11);
Thing_SetTranslation (712, 12);
Thing_SetTranslation (713, 13);
Thing_SetTranslation (714, 14);
Thing_SetTranslation (715, 15);
Thing_SetTranslation (716, 16);
Thing_SetTranslation (717, 17);
Thing_SetTranslation (718, 18);
Thing_SetTranslation (719, 19);
}

//// end of translations

script 250 (void)					// water splash

{
activatorsound ("splash", 127);
}

str playerClassStr="DoomPlayer";

script 251 (int arg0, int arg1)				// spring (horizontal)

{
str activatorClass=GetActorClass(0);
bool b=true;//(activatorClass == playerClassStr);
if (b)
{
activatorsound ("spring", 127);
ThrustThing (arg1, arg0, 1);
}
}

script 252 (int arg0, int arg1)				// spring (vertical)

{
str activatorClass=GetActorClass(0);
bool b=true;//(activatorClass == playerClassStr);
if (b)
{
activatorsound ("spring", 127);
ThrustThingZ (0, arg0, arg1, 0);
}
}

//// weapons/items

int ammo1;
int capacity1;
int ammo2;
int capacity2;
int ammo3;
int capacity3;
int ammo4;
int capacity4;
int ammo5;
int capacity5;
int weapon1;
int weapon2;
int weapon3;
int weapon33;
int weapon4;
int weapon5;
int weapon6;
int weapon7;
int weapon8;
int pack;
int health;
int armour;

#define T_BAZOOKA 170

script 233 ENTER					// player TID changer

{
Thing_ChangeTID (0, PlayerNumber()+1337);
}

script 234 ENTER					// clip checker

{
ammo1 = CheckInventory ("Clip");

if(ammo1 < capacity1)
{
    setthingspecial (1020, 249, 0, 20, 0, 0);
}

if(ammo1 == capacity1)
{
    setthingspecial (1020, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 235 ENTER					// rocket checker

{
ammo3 = CheckInventory ("RocketAmmo");

if(ammo3 < capacity3)
{
    setthingspecial (1051, 226, 249, 0, 51, 0, 0);
    setthingspecial (1055, 226, 249, 0, 55, 0, 0);
}

if(ammo3 == capacity3)
{
    setthingspecial (1051, 0, 0, 0, 0, 0, 0);
    setthingspecial (1055, 0, 0, 0, 0, 0, 0);
}


delay(1);
Restart;
}

script 236 ENTER					// chainsaw checker

{
weapon1 = CheckInventory ("Chainsaw");

if(weapon1 == 0)
{
    setthingspecial (1001, 226, 249, 0, 1, 0, 0);
}

if(weapon1 > 0)
{
    setthingspecial (1001, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 237 ENTER					// pistol checker

{
weapon2 = CheckInventory ("Pistol");
ammo1 = CheckInventory ("Clip");

if(ammo1 < capacity1)
{
    setthingspecial (1002, 226, 249, 0, 2, 0, 0);
}

if(weapon2 == 0)
if(ammo1 == capacity1)
{
    setthingspecial (1002, 226, 249, 0, 2, 0, 0);
}

if(weapon2 > 0)
if(ammo1 == capacity1)
{
    setthingspecial (1002, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 238 ENTER					// shotgun checker

{
weapon3 = CheckInventory ("Shotgun");
ammo2 = CheckInventory ("Shell");

if(ammo2 < capacity2)
{
    setthingspecial (1003, 226, 249, 0, 3, 0, 0);
}

if(weapon3 == 0)
if(ammo2 == capacity2)
{
    setthingspecial (1003, 226, 249, 0, 3, 0, 0);
}

if(weapon3 > 0)
if(ammo2 == capacity2)
{
    setthingspecial (1003, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 239 ENTER					// super shotgun checker

{
weapon33 = CheckInventory ("SuperShotgun");
ammo2 = CheckInventory ("Shell");

if(ammo2 < capacity2)
{
    setthingspecial (1033, 226, 249, 0, 33, 0, 0);
}

if(weapon33 == 0)
if(ammo2 == capacity2)
{
    setthingspecial (1033, 226, 249, 0, 33, 0, 0);
}

if(weapon33 > 0)
if(ammo2 == capacity2)
{
    setthingspecial (1033, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}


script 240 ENTER					// chaingun checker

{
weapon4 = CheckInventory ("Chaingun");
ammo1 = CheckInventory ("Clip");

if(ammo1 < capacity1)
{
    setthingspecial (1004, 226, 249, 0, 4, 0, 0);
}

if(weapon4 == 0)
if(ammo1 == capacity1)
{
    setthingspecial (1004, 226, 249, 0, 4, 0, 0);
}

if(weapon4 > 0)
if(ammo1 == capacity1)
{
    setthingspecial (1004, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 241 ENTER					// rocket launcher checker

{
weapon5 = CheckInventory ("PhoenixRod");
ammo3 = CheckInventory ("RocketAmmo");

if(ammo3 < capacity3)
{
    setthingspecial (1005, 226, 249, 0, 5, 0, 0);
}

if(weapon5 == 0)
if(ammo3 == capacity3)
{
    setthingspecial (1005, 226, 249, 0, 5, 0, 0);
}

if(weapon5 > 0)
if(ammo3 == capacity3)
{
    setthingspecial (1005, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 242 ENTER					// plasma gun checker

{
weapon6 = CheckInventory ("PlasmaRifle");
ammo4 = CheckInventory ("Cell");

if(ammo4 < capacity4)
{
    setthingspecial (1006, 226, 249, 0, 6, 0, 0);
}

if(weapon6 == 0)
if(ammo4 == capacity4)
{
    setthingspecial (1006, 226, 249, 0, 6, 0, 0);
}

if(weapon6 > 0)
if(ammo4 == capacity4)
{
    setthingspecial (1006, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 243 ENTER					// bfg checker

{
weapon7 = CheckInventory ("BFG9000");
ammo4 = CheckInventory ("Cell");

if(ammo4 < capacity4)
{
    setthingspecial (1007, 226, 249, 0, 7, 0, 0);
}

if(weapon7 == 0)
if(ammo4 == capacity4)
{
    setthingspecial (1007, 226, 249, 0, 7, 0, 0);
}

if(weapon7 > 0)
if(ammo4 == capacity4)
{
    setthingspecial (1007, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 244 ENTER					// railgun checker

{
weapon8 = CheckInventory ("RocketLauncher");
ammo4 = CheckInventory ("Cell");

if(ammo4 < capacity4)
{
    setthingspecial (1008, 226, 249, 0, 8, 0, 0);
}

if(weapon8 == 0)
if(ammo4 == capacity4)
{
    setthingspecial (1008, 226, 249, 0, 8, 0, 0);
}

if(weapon8 > 0)
if(ammo4 == capacity4)
{
    setthingspecial (1008, 0, 0, 0, 0, 0, 0);
}

delay(1);
Restart;
}

script 245 ENTER					// flame orb/rocket checker

{
ammo3 = CheckInventory ("RocketAmmo");
ammo5 = CheckInventory ("PhoenixRodAmmo");

if(ammo5 < ammo3)
{
    TakeInventory ("RocketAmmo", ammo3 - ammo5);
}

if(ammo5 > ammo3)
{
    GiveInventory ("RocketAmmo", ammo5 - ammo3);
}
delay(1);
Restart;
}

script 246 (void)					// ring

{
GiveInventory ("HealthBonus", 1);
}

script 247 (void)					// backpack

{

}

script 248 ENTER					// capacity checker

{
pack = CheckInventory ("Backpack");

if(pack == 0)
{
    capacity1 = 150;
    capacity2 = 40;
    capacity3 = 20;
    capacity4 = 200;
}

if(pack > 0)
{
    capacity1 = 300;
    capacity2 = 80;
    capacity3 = 40;
    capacity4 = 400;
}
delay(1);
Restart;
}

script 249 (int arg0)					// grab stuff

{
if(arg0 == 1)
{
    GiveInventory ("Chainsaw", 1);
}

if(arg0 == 2)
{
    GiveInventory ("Pistol", 1);
}

if(arg0 == 20)
{
    GiveInventory ("Clip", 1);
}

if(arg0 == 3)
{
    GiveInventory ("Shotgun", 1);
}

if(arg0 == 33)
{
    GiveInventory ("SuperShotgun", 1);
}

if(arg0 == 4)
{
    GiveInventory ("Chaingun", 1);
}

if(arg0 == 5)
{
    GiveInventory ("PhoenixRod", 1);
}

if(arg0 == 51)
{
    GiveInventory ("PhoenixRodAmmo", 1);
}

if(arg0 == 55)
{
    GiveInventory ("PhoenixRodAmmo", 5);
}

if(arg0 == 6)
{
    GiveInventory ("PlasmaRifle", 1);
}

if(arg0 == 7)
{
    GiveInventory ("BFG9000", 1);
}

if(arg0 == 8)
{
    GiveInventory ("RocketLauncher", 1);
}

if(arg0 == 50)
{
GiveInventory ("ArmorBonus", (50 - armour));
}

if(arg0 == 200)
{
   GiveInventory ("HealthBonus", 50);
}

}

script 253 ENTER					// golden health potion checker

{
health =  CheckInventory ("Health");

if(health < 200)
{
   setthingspecial (1200, 226, 249, 0, 200, 0, 0);
}

if(health == 200)
{
   setthingspecial (1200, 0, 0, 0, 0, 0, 0);
}
delay(1);
Restart;
}

script 254 ENTER					// light armour checker

{
armour =  CheckInventory ("Armor");

if(armour < 50)
{
   setthingspecial (1050, 226, 249, 0, 50, 0, 0);
}

if(armour > 49)
{
   setthingspecial (1050, 0, 0, 0, 0, 0, 0);
}
delay(1);
Restart;
}

//// end of weapons/items

// useful functions (by tiszaszaki)

function int min(int a, int b)
{
	int res=b;
	if (a < b) res = a;
	return res;
}

function int max(int a, int b)
{
	int res=b;
	if (a > b) res = a;
	return res;
}